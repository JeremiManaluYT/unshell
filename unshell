#!/bin/env bash

# === Set Unlimited Memory Stacks TO perform large amounts of Recursions ===
ulimit -s unlimited >/dev/null 2>&1

# === Function for color text output ===
color_text() {
  echo -e "\033[${1}m${2}\033[0m"
}

# === Function for loading animation that can be used with any command ===
loading_animation() {
  local message="$1"   # === Message to be displayed ===
  local pid=$2         # === PID of the running process ===
  local spinner=('⠋' '⠙' '⠹' '⠸' '⠼' '⠴' '⠦' '⠧' '⠇' '⠏')
  local i=0

  # === Display animation while the process is running ===
  while kill -0 $pid 2>/dev/null; do
    printf "\r$(color_text "33" "$message") ${spinner[$i]}"
    i=$(( (i + 1) % ${#spinner[@]} ))
    sleep 0.1
  done
}

# === Function to run a command with loading animation ===
run_with_loading() {
  local message="$1"
  shift  # === Remove the first argument to get the command ===

  # === Get PID of the background process ===
  {
    "$@"  # === Execute the command passed as arguments ===
  } &

  local pid=$!  # === Get the PID of the background process ===
  
  # === Call loading animation with the message and PID ===
  loading_animation "$message" $pid

  # === Wait for the background process to finish ===
  wait $pid
}

# === Word Wrap for smaller screen ===
word_wrap() {
    character="45"
    # Manually wrap the text at $character characters
    while IFS= read -r line; do
        # Split the line into chunks of $character characters and print each chunk
        while [ ${#line} -gt $character ]; do
            echo "${line:0:$character}"
            line="${line:$character}"
        done
        # Print the remaining part of the line
        echo "$line"
    done <<< "$1"
}

# === Check for root mofules in folder ===
folders=(
  "/data/adb/modules"
  "/data/adb/magisk"
)

# Iterate through each folder and check if it exists
for folder in "${folders[@]}"; do
  if [ -d "$folder" ]; then
    warn "Root folder found in \"$folder\""
    warn "Rooted device detected."
    word_wrap "Using unshell to retrieve the original shell script from SHC, SSC, or Ri-crypt obfuscation could potentially harm your machine, these obfuscation type requires to executing the script to order to deobfuscate thus leave your machine in danger if script does something malicious. Avoid running unshell with root permissions unless you fully trust the script!"
    exit 1
  fi
done

# === Define Color Codes Variables ===
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RESET='\033[0m'

# === Handling Functions: ===
       # == Error Function ===
error() {
    echo -e "${RED}❌ ERROR: $1${RESET}"
    exit 1
}

# === Success Function ===
success() {
    echo -e "${GREEN}✅ SUCCESS: $1${RESET}"
}

# === Warning Function ===
warn() {
    echo -e "${YELLOW}⚠️ WARNING: $1${RESET}"
}

# === Usage Messages ===
show_usage() {
    printf "%s - Deobfuscate shell scripts using multiple methods and layers for FREE!\n" "${0##*/}"
    printf "Usage: %s [OPTIONS] [FILE]\n" "${0##*/}"
    printf "Usage: %s [OPTIONS] [DIR]\n\n" "${0##*/}"
    printf "Options:\n"
    printf "  -h, --help                 Show this message\n"
    printf "  -f, --file [FILE]          Specify script(s) to deobfuscate (supports multiple inputs)\n"
    printf "  -r, --recursive [DIR]      Recursively find and deobfuscate shells in the specified directory\n"
    printf "  -v, --verbose              Enable verbose mode (for debugging or troubleshooting) \n"
    printf "  -d, --execve-delay [SECONDS] Set a custom execve delay in seconds (for SHC/SSC encryption)\n"
    printf "  -U, --update               Update the script\n\n"
    printf "Examples:\n"
    printf "  %s -f install.sh menu.sh uninstall.sh\n" "${0##*/}"
    printf "  %s -v -f /system/bin/gaming_script.sh\n" "${0##*/}"
    printf "  %s -d 6.018 -f ./VTK\n" "${0##*/}"
    printf "  %s -r .\n" "${0##*/}"
    printf "\nTelegram Dev: @Rem01Gaming\n"
    exit 0
}

# === Update Script ===
update_script() {
	temp="$HOME/unshell.temp"
	which_is_unshell=$(which unshell)
   
	if [ -z "$which_is_unshell" ]; then
		error "'which' is not installed ❌, please install it!"
		exit 1
	fi

	# === Download the latest version ===
	if ! curl -Lo "$temp" https://github.com/JeremiManaluYT/unshell/raw/main/unshell; then
		rm -f "$temp"
		error "☹️ Failed to download update script"
		exit 1
	fi

	# === Update the script if download is success or fail ===
		chmod +x "$which_is_unshell"
		success "Updated successfully"
		exit 0
	
		error "☹️ Failed to update"
		exit 1
}

# === Decrypt Methods ===
remove_comments() {
	if ! hash shfmt; then
		error "environment has missing dependencies (please install shfmt) "
		return 127
	fi
	shfmt -mn ./$filename.temp1.sh >./$filename.temp2.sh
	mv ./$filename.temp2.sh ./$filename.temp1.sh
}

decrypt_ricrypt() {
	if ! hash strace; then
		error "environment has missing dependencies (please install strace) "
		return 127
	fi
	spath=$(echo $PATH | cut -d: -f1)
	cp ./$filename.temp1.sh $spath/$filename.temp1.sh
	chmod +x $spath/$filename.temp1.sh

	strace -s 50000 -f -e trace=execve $filename.temp1.sh 2>&1 |
		while read -r line; do
			if echo "$line" | grep -q "eval"; then
				pkill $filename.temp1.sh
				echo $line | grep -oP 'eval.*?"\K[^"]+' | tr -d '\' 2>/dev/null | base64 -d >./$filename.temp2.sh
				break
			fi
		done

	rm -f $spath/$filename.temp1.sh
	if [ -s ./$filename.temp2.sh ]; then
		mv ./$filename.temp2.sh ./$filename.temp1.sh
	else
		rm ./$filename.temp2.sh ./$filename.temp1.sh
	fi
}

decrypt_ssc() {
	spath=$(echo $PATH | cut -d: -f1)
	cp ./$filename.temp1.sh $spath/$filename.temp1.sh
	chmod +x $spath/$filename.temp1.sh

	if [ -z $EXECVE_DELAY ]; then
		for sec in {10..28}; do
			$filename.temp1.sh &
			child=$!
			sleep 0.0"$sec"
			kill -STOP $child
			cat /proc/$child/fd/3 >"./$filename.temp2.sh"
			kill -TERM $child

			if [ -s ./$filename.temp2.sh ]; then
				break
			fi
		done
	else
		$filename.temp1.sh &
		child=$!
		sleep $EXECVE_DELAY
		kill -STOP $child
		cat /proc/$child/fd/3 >"./$filename.temp2.sh"
		kill -TERM $child
	fi

	rm -f $spath/$filename.temp1.sh
	if [ -s ./$filename.temp2.sh ]; then
		if ! grep -q '#!/' "./$filename.temp2.sh"; then
			echo "notice: Output script maybe truncated"
		fi

		mv ./$filename.temp2.sh ./$filename.temp1.sh
	else
		rm ./$filename.temp2.sh ./$filename.temp1.sh
	fi
}

decrypt_shc() {
	spath=$(echo $PATH | cut -d: -f1)
	cp ./$filename.temp1.sh $spath/$filename.temp1.sh
	chmod +x $spath/$filename.temp1.sh

	if [ -z $EXECVE_DELAY ]; then
		for sec in {1..7}; do
			$filename.temp1.sh &
			child=$!
			sleep 0.0"$sec"
			kill -STOP $child
			cat /proc/$child/cmdline | sed 's/.*\(#!\)/\1/' >"./$filename.temp2.sh"
			kill -TERM $child

			if grep -q '#!/' "./$filename.temp2.sh"; then
				break
			fi
		done
	else
		$filename.temp1.sh &
		child=$!
		sleep $EXECVE_DELAY
		kill -STOP $child
		cat /proc/$child/cmdline | sed 's/.*\(#!\)/\1/' >"./$filename.temp2.sh"
		kill -TERM $child
	fi

	rm -f $spath/$filename.temp1.sh
	if grep -q '#!/' "./$filename.temp2.sh"; then
		mv ./$filename.temp2.sh ./$filename.temp1.sh
	else
		rm ./$filename.temp2.sh ./$filename.temp1.sh
	fi
}

remove_hex() {
    if ! hash xxd; then
        error "environment has missing dependencies (please insta xxd)" 
    return 127
    fi
    
    sed 's/eval "\$/echo "\$/g' ./$filename.temp1.sh >./$filename.temp2.sh
    bash ./$filename.temp2.sh | xxd -r -p >./$filename.temp1.sh
    rm ./$filename.temp2.sh
}

decrypt_bashrock() {
	sed 's/eval "$x";/echo "$x";/g' ./$filename.temp1.sh >./$filename.temp2.sh
	bash ./$filename.temp2.sh >./$filename.temp1.sh
	rm ./$filename.temp2.sh
}

decrypt_bashprotector() {
	sed 's/\beval\b/echo/g' ./$filename.temp1.sh >./$filename.temp2.sh
	bash ./$filename.temp2.sh | bash >./$filename.temp1.sh
	rm ./$filename.temp2.sh
}

decrypt_bashobsf() {
	sed 's/eval "\$/echo "\$/g; s/\[ "$(id -u)" -ne 2000 \]/! true/' ./$filename.temp1.sh >./$filename.temp2.sh
	bash ./$filename.temp2.sh >./$filename.temp1.sh
	rm ./$filename.temp2.sh
}
decrypt_rot47() {
    sed 's/eval "\$/echo "\$/g' ./$filename.temp1.sh > ./$filename.temp2.sh
    bash ./$filename.temp2.sh | tr 'A-Za-z0-9' 'P-ZA-O0-9' > ./$filename.temp1.sh
    rm ./$filename.temp2.sh
}
decrypt_urlencode() {
    # Replace eval with echo for safer execution
    sed 's/eval "\$/echo "\$/g' "./$filename.temp1.sh" > ./$filename.temp2.sh
    bash "./$filename.temp2.sh" | sed -E 's/%([0-9A-Fa-f]{2})/\\x\1/g' | xargs -0 printf "%b" > ./$filename.temp1.sh
    rm ./$filename.temp2.sh
}
decrypt_tpp() {
	if ! hash shfmt; then
		error "environment has missing dependencies (please install shfmt) "
		return 127
	fi
	shfmt -mn -w ./$filename.temp1.sh
	sed '/<<EOF/,/EOF/d' ./$filename.temp1.sh > ./$filename.temp2.sh
	mv ./$filename.temp2.sh ./$filename.temp1.sh
	sed 's/eval "\$/echo "\$/g' ./$filename.temp1.sh > ./$filename.temp2.sh
	bash ./$filename.temp2.sh >./$filename.temp1.sh
	rm ./$filename.temp2.sh
}

decrypt_rot13() {
    sed 's/eval "\$/echo "\$/g' ./$filename.temp1.sh >./$filename.temp2.sh
    bash ./$filename.temp2.sh | tr 'A-Za-z' 'N-ZA-Mn-za-m' >./$filename.temp1.sh
    rm ./$filename.temp2.sh
}

decrypt_base64() {
	sed 's/base64 -d | [a-z\/]*sh/base64 -d/; s/\[ "$(id -u)" -ne 2000 \]/! true/' ./$filename.temp1.sh >./$filename.temp2.sh
	bash ./$filename.temp2.sh >./$filename.temp1.sh
	rm ./$filename.temp2.sh
}

decrypt_rot57() {
    sed 's/eval "\$/echo "\$/g' ./$filename.temp1.sh > ./$filename.temp2.sh
    bash ./$filename.temp2.sh | tr '!-~' 'P-~!A-O' > ./$filename.temp1.sh
    rm ./$filename.temp2.sh
}

decrypt_bzip2() {
	skip=$(($(sed -n 2p ./$filename.temp1.sh | awk -F'=' '{print $2}') - 1))
	sed 1,${skip}d ./$filename.temp1.sh >./$filename.temp2.sh
	bzip2 -cd ./$filename.temp2.sh >./$filename.temp1.sh
	rm ./$filename.temp2.sh
}

decrypt_reverse() {
    sed 's/eval "\$/echo "\$/g' ./$filename.temp1.sh >./$filename.temp2.sh
    bash ./$filename.temp2.sh | rev >./$filename.temp1.sh
    rm ./$filename.temp2.sh
}

decrypt_rot18() {
    sed 's/eval "\$/echo "\$/g' ./$filename.temp1.sh >./$filename.temp2.sh
    bash ./$filename.temp2.sh | tr 'A-Za-z0-9' 'I-ZA-Hi-zA-H9-0' > ./$filename.temp1.sh
    rm ./$filename.temp2.sh
}

decrypt_octal() {
    sed 's/eval "\$/echo "\$/g' ./$filename.temp1.sh >./$filename.temp2.sh
    bash ./$filename.temp2.sh | awk '{for(i=1;i<=NF;i++)printf("%c",strtonum("0"$i));printf("\n")}' >./$filename.temp1.sh
    rm ./$filename.temp2.sh
}

decrypt_binary() {
     if ! hash perl; then
     error "environment has missing dependencies (please install perl)" 
    return 127
    fi 
    
    sed 's/eval "\$/echo "\$/g' ./$filename.temp1.sh >./$filename.temp2.sh
    bash ./$filename.temp2.sh | perl -lpe '$_=pack"B*",$_' >./$filename.temp1.sh
    rm ./$filename.temp2.sh
}

decrypt_hexadecimal() {
    sed 's/eval "\$/echo "\$/g' ./$filename.temp1.sh >./$filename.temp2.sh
    bash ./$filename.temp2.sh | xxd -r -p >./$filename.temp1.sh
    rm ./$filename.temp2.sh
}

decrypt_axeron() {
	cat <<"EOF" >./temp_functions.sh
rozaq() {
	if [ "$1" = "-d" ] && [ -n "$2" ]; then
		[[ "${2:0:3}" = "r17" ]] && echo "${2:3}" | tr R-ZA-Qr-za-q A-Za-z | base64 -d || echo "$2"
	else
		echo "r17$(echo -n "$1" | base64 | tr A-Za-z R-ZA-Qr-za-q)"
	fi
}

storm() {
	obsf_link=$(echo $2)
	rozaq -d $obsf_link
}
EOF

	REP_FUNCTION="./temp_functions.sh"
	sed "s|source \$FUNCTION|source $REP_FUNCTION|; s/\[ \"\$(id -u)\" -ne 2000 \]/! true/" ./$filename.temp1.sh >./$filename.temp2.sh
	obsf_link=$(bash ./$filename.temp2.sh)
	echo "Obfuscated link: $obsf_link"
	echo "Downloading script..."
	rm $REP_FUNCTION
	curl -Lo ./$filename.temp1.sh $obsf_link
	# Don't use '||' here, just don't
	[ $? -gt 0 ] && rm ./$filename.temp1.sh && error "unable to download axeron script." && return 1
}

decrypt_eval_base64() {
	sed 's/eval "\$/echo "\$/g; s/\[ "$(id -u)" -ne 2000 \]/! true/' ./$filename.temp1.sh >./$filename.temp2.sh
	bash ./$filename.temp2.sh >./$filename.temp1.sh
	rm ./$filename.temp2.sh
}

# === Decrypt Layers Detector ===
init_dec() {
	[ $VERBOSE -eq 1 ] && set -x
	while true; do
		if [ ! -f ./$filename.temp1.sh ]; then
			break
		elif grep -q '$RzE' ./$filename.temp1.sh; then
			counter=$((counter + 1))
			echo "Layer $counter: bashrock"
			decrypt_bashrock
			PASSED_LOOP=1
		elif grep -q 'Tx=Eds' ./$filename.temp1.sh; then
			counter=$((counter + 1))
			echo "Layer $counter: bashprotector"
			decrypt_bashprotector
			PASSED_LOOP=1
		elif grep -q 'z=.*;.*z=.*;' ./$filename.temp1.sh; then
			counter=$((counter + 1))
			echo "Layer $counter: bash-obfuscate"
			decrypt_bashobsf
			PASSED_LOOP=1
		elif grep -q 'dec_*=$(echo\s"$enc"' ./$filename.temp1.sh && ! grep -q 'while\sread' ./$filename.temp1.sh; then
			counter=$((counter + 1))
			echo "Layer $counter: TPP Tool"
			decrypt_tpp
			PASSED_LOOP=1
		elif grep -q "Strong_Encryptor_By_BOYZGAMES" ./$filename.temp1.sh && ! grep -q 'ro.serialno' ./$filename.temp1.sh; then
			counter=$((counter + 1))
			echo "Layer $counter: Strong_Encryptor_By_BOYZGAMES (base64)"
			decrypt_eval_base64
			PASSED_LOOP=1
		elif grep -q 'storm\s-x' ./$filename.temp1.sh; then
			counter=$((counter + 1))
			echo "Layer $counter: Axeron online modules"
			decrypt_axeron
			PASSED_LOOP=1
		elif grep -q '/bin/bzip2\s-cd' ./$filename.temp1.sh && grep -q 'skip=23' ./$filename.temp1.sh; then
			counter=$((counter + 1))
			echo "Layer $counter: BZip2"
			decrypt_bzip2
			PASSED_LOOP=1
	                elif grep -q 'eval.*tr.*N-ZA-Mn-za-m' ./$filename.temp1.sh; then
                        counter=$((counter + 1))
                        echo "Layer $counter: ROT13"
                        decrypt_rot13
                        PASSED_LOOP=1
               elif grep -q 'eval.*tr.*A-Za-z0-9' ./$filename.temp1.sh; then
                        counter=$((counter + 1))
                        echo "Layer $counter: ROT18"
                        decrypt_rot18
                        PASSED_LOOP=1
               elif grep -q 'tr.*!-~.*P-~!' ./$filename.temp1.sh; then
                        counter=$((counter + 1))
                        echo "Layer $counter: ROT57"
                        decrypt_rot57
                        PASSED_LOOP=1
               elif grep -q 'eval.*xxd.*r' ./$filename.temp1.sh; then
                        counter=$((counter + 1))
                        echo "Layer $counter: Hexadecimal"
                        remove_hex
                        PASSED_LOOP=1
               elif grep -q 'rev' ./$filename.temp1.sh; then
                        counter=$((counter + 1))
                        echo "Layer $counter: Reverse"
                        decrypt_reverse
                        PASSED_LOOP=1
              elif grep -q 'echo.*[0-7]\{3\}' ./$filename.temp1.sh; then
                        counter=$((counter + 1))
                        echo "Layer $counter: Octal"
                        decrypt_octal
                        PASSED_LOOP=1
              elif grep -q 'echo.*[01]\{8\}' ./$filename.temp1.sh; then
                        counter=$((counter + 1))
                        echo "Layer $counter: Binary"
                        decrypt_binary
                        PASSED_LOOP=1
	      elif grep -q 'base64 -d | [a-z\/]*sh$' ./$filename.temp1.sh; then
			counter=$((counter + 1))
			echo "Layer $counter: Base64"
			decrypt_base64
			PASSED_LOOP=1
	      elif grep -qE '%[0-9A-Fa-f]{2}' "./$filename.temp1.sh"; then
                        counter=$((counter + 1))
                        echo "Layer $counter: URL Encoding"
                        decrypt_urlencode
                        PASSED_LOOP=1
              elif grep -q 'eval.*tr.*!-~' ./$filename.temp1.sh; then
                        counter=$((counter + 1))
                        echo "Layer $counter: ROT47"
                        decrypt_rot47
                        PASSED_LOOP=1 
	      elif [ $(grep -c '^#' ./$filename.temp1.sh) -gt 180 ]; then
			counter=$((counter + 1))
			echo "Layer $counter: Extreme comment/editor EOF trick"
			remove_comments
			PASSED_LOOP=1
		elif strings ./$filename.temp1.sh | grep -q 'SSC_ARGV0'; then
			counter=$((counter + 1))
			echo "Layer $counter: SSC"
			decrypt_ssc
			PASSED_LOOP=1
		elif strings ./$filename.temp1.sh | grep -q 'E:\sneither\sargv\[0\]\snor\s\$_\sworks\.'; then
			counter=$((counter + 1))
			echo "Layer $counter: SHC"
			decrypt_shc
			PASSED_LOOP=1
		elif strings ./$filename.temp1.sh | grep -q 'sh-c☹️ Failed'; then
			counter=$((counter + 1))
			echo "Layer $counter: Ri-crypt"
			decrypt_ricrypt
			PASSED_LOOP=1
		else
			[ $PASSED_LOOP -eq 0 ] && rm ./$filename.temp1.sh && error "uknown patterns, deobfuscation is not supported."
			break
		fi
	done

    # === Check if the obfuscate failed ===
	if [ ! -s ./$filename.temp1.sh ]; then
		[ $VERBOSE -eq 1 ] && set +x
		echo "☹️ Failed to deobfuscate $1"
		remove_temp
		return 1
	fi
 
    # === Check if the file obfuscate successfully ===
	[ $VERBOSE -eq 1 ] && set +x
	mv ./$filename.temp1.sh ./$filename.dec.sh
	success "./$filename.dec.sh unshelled ✅"
	remove_temp
}

# === Function to clean up previous temporary decryptions ===
remove_temp() {
	rm -f ./$filename.temp*.sh
	counter=0
}

# === Function to process individual files ===
process_files() {
	for file in "$@"; do
		if [ ! -f "$file" ]; then
			error "file $file does not exist!"
		else
			PASSED_LOOP=0
			filename=$(basename "$file")
			cp "$file" "./$filename.temp1.sh"
			run_with_loading "Deobfuscating $file → ./$filename.dec.sh... " sleep 3
			init_dec "$file"
		fi
	done
}

# === Function to process files recursively ===
process_recursive() {
	find "$1" -maxdepth 1 -type f | while IFS= read -r file; do
		process_files "$file"
	done
}

# === Check if Strings and Curl Installed ===
if ! hash strings curl; then
	error "environment has missing dependencies (please install curl) "
	exit 1
fi

# === Default Variables ===
RECURSIVE=0
FILES=0
VERBOSE=0

# === Options ===
while [[ $# -gt 0 ]]; do
	case $1 in
	-h | --help)
		show_usage
		exit 0
		;;
	-v | --verbose)
		VERBOSE=1
		shift
		;;
	-d | --execve-delay)
		shift
		if [[ $1 =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
			EXECVE_DELAY=$1
		else
			error "execve delay MUST be a positive integer or decimal number!\nFor help, type: 'unshell --help'."
			exit 1
		fi
		shift
		;;
	-U | --update)
		update_script
		shift
		;;
	-r | --recursive)
		RECURSIVE=1
		shift
		break
		;;
	-f | --file)
		FILES=1
		shift
		break
		;;
	-*)
		error "bad option\nFor help, type: 'unshell --help'."
		exit 1
		;;
	*) shift ;;
	esac
done

# === Check for required arguments ===
if [[ "$RECURSIVE" -eq 1 && "$FILES" -eq 1 ]]; then
	error "-r and -f option cannot coexist!\nFor help, type: 'unshell --help'."
	exit 1
elif [[ "$RECURSIVE" -eq 0 && "$FILES" -eq 0 ]]; then
	error "the following arguments are required: -f, --file or -r, --recursive\nFor help, type: 'unshell --help'."
	exit 1
fi

# === Check if a file or directory exist  ===
if [ -z "$1" ]; then
	error "no input file or directory\nFor help, type: 'unshell --help'."
	exit 1
fi

# === Process Directories ===
if [ "$RECURSIVE" -eq 1 ]; then
	for dir in "$@"; do
		if [ -d "$dir" ]; then
			process_recursive "$dir"
		else
			error "$dir is not a directory!"
		fi
	done
else
	process_files "$@"
fi
